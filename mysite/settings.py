"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import sys

from kombu import Queue

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'flnh=1!tsz^4&grtw&0$2&6#n*@aybhg-vdpa-i1rc&pyv$+9c'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mysite.core',
    'mysite.core1',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'mysite/templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'


CELERY_BROKER_URL = "redis://localhost:6379/0"

CELERY_TASK_QUEUES = [
    Queue(name='celery'),
    Queue(name='queue1', routing_key='queue1'),
    Queue(name='queue2', routing_key='queue1'),
]

CELERY_TASK_ROUTES = {
 'core.tasks.create_random_user_accounts':  {'queue': 'queue1', 'routing_key': 'queue1'},
 'core.tasks.create_random_user_accounts_2': {'queue': 'queue2', 'routing_key': 'queue2'},
}

# command to run celery in environment
# celery -A mysite worker -l info -Q queue1,queue2,celery


# command to run flower
# celery flower -A mysite --broker=redis://localhost:6379/0


import logging
LOGGING_ROOT = os.path.join(BASE_DIR, '/')


LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'simple': {
            'format': '%(levelname)s dc %(message)s',
            'datefmt': '%y %b %d, %H:%M:%S',
        },
        'normal': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            'datefmt': '%y %b %d, %H:%M:%S',
        },

    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        # 'django': {
        #     'level': 'INFO',
        #     'class': 'logging.handlers.RotatingFileHandler',
        #     'filename': 'logs/django.log',
        #     'formatter': 'normal',
        #     'maxBytes': 1024 * 1024 * 100,  # 100 mb
        # },
        'celery': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/celery.log',
            'formatter': 'normal',
            'maxBytes': 1024 * 1024 * 100,  # 100 mb
        },
        'engineapp': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/engine.log',
            'formatter': 'normal',
            'maxBytes': 1024 * 1024 * 100,  # 100 mb
        },
        'scrapy': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/scrapy.log'),
            'formatter': 'normal'
        }
    },
    'loggers': {
        # 'django': {
        #     'handlers': ['django',],
        #     'level': 'INFO',
        # },
        'scrapy': {
            'handlers': ['scrapy'],
            'level': 'INFO',
        },
        'engineapp': {
            'handlers': ['engineapp'],
            'level': 'INFO',
        },
        'celery': {
            'handlers': ['engineapp'],
            'level': 'INFO',
        },
    },

}

from logging.config import dictConfig

dictConfig(LOGGING)
